  #include <ESP32Servo.h>
  #include <WiFi.h>
  #include <WiFiClientSecure.h>
  #include <UniversalTelegramBot.h>
  #include <ESP32AnalogRead.h>
  #include <HTTPClient.h>

  // Wifi network station credentials
  #define WIFI_SSID "Vigokk" //ssid wifi
  #define WIFI_PASSWORD "22222222" //pasword wifi

  // Telegram BOT Token 
  #define BOT_TOKEN " " //token bot
  #define CHAT_ID "12345678" //admin user id telegram
  const String ALLOWED_USERS[] = {"12345678", "23145675", "85843567", "53578765", "95768432"}; //user id telegram

  const unsigned long BOT_MTBS = 1000; // mean time between scan messages
  WiFiClientSecure secured_client;
  UniversalTelegramBot bot(BOT_TOKEN, secured_client);
  unsigned long bot_lasttime; // last time messages' scan has been done
 
  //LED
  #define ledPin 32
  int ledStatus = 0;

  //Servo Motor
  #define SERVO_PIN 26 
  int motorAngle = 0;
  Servo servoMotor;
  bool doorLocked = true;
  bool doorUnlocked = false;

  //Magnetic Sensor
  #define DOOR_SWITCH_PIN 19
  int doorState = 0;
  bool isDoorClosed = false;

  //buzzer
  #define buzzer 23


  void handleNewMessages(int numNewMessages)
  {
  Serial.print("handleNewMessages ");
  Serial.println(numNewMessages);
  for (int i = 0; i < numNewMessages; i++)
  {
    String chat_id = String(bot.messages[i].chat_id);
    bool is_allowed_user = false;
    for (int j = 0; j < sizeof(ALLOWED_USERS) / sizeof(ALLOWED_USERS[0]); j++)
    {
      if (chat_id == ALLOWED_USERS[j])
      {
        is_allowed_user = true;
        break;
      }
    }
    if (!is_allowed_user)
    {
      bot.sendMessage(chat_id, "User tidak terdaftar pada database 😟", "");
      continue;
    }
      else
      {
        String text = bot.messages[i].text;
        String from_name = bot.messages[i].from_name;
        if (from_name == "")
          from_name = "Guest";
        if (text == "/unlock")
        {
          motorAngle = 180;
          servoMotor.write(90);
          doorLocked = false;
          bot.sendMessage(chat_id, "Pintu berhasil dibuka", "");
          bot.sendMessage(chat_id, "❗ Pastikan kembali untuk mengunci pintu ketika pekerjaan pada perangkat telah diselesaikan.", "");
          digitalWrite(ledPin, LOW); 
          ledStatus = 0;
          digitalWrite (buzzer, HIGH); 
          delay(1000);
          digitalWrite (buzzer, LOW); 
          delay(500);
        }
        if (text == "/lock")
        {
          motorAngle = 0;
          servoMotor.write(25);
          doorLocked = true;
          bot.sendMessage(chat_id, "Pintu berhasil dikunci", "");
          digitalWrite(ledPin, HIGH); 
          ledStatus = 1;
          digitalWrite (buzzer, HIGH); 
          delay(250);
          digitalWrite (buzzer, LOW); 
          delay(250);
          digitalWrite (buzzer, HIGH); 
          delay(250);
          digitalWrite (buzzer, LOW); 
          delay(250);
        }
        if (text == "/status")
        {
          if (motorAngle)
          {
            bot.sendMessage(chat_id, "Pintu Terbuka", "");
          }
          else
          {
            bot.sendMessage(chat_id, "Pintu Terkunci", "");
          }
        }
        if (text == "/isijob"){
             bot.sendMessage(chat_id, "❗Silahkan Klik @oltokeyjob_bot untuk mengisikan data.", "");         
        }
        if (text == "/start")
        {
          String welcome = "Halo, " + from_name + ".\n";
          welcome += "Selamat Datang di OLTOKEY Bot 😉\n\n";
          welcome += "OLTOKEY (OLT Door Tele Key) merupakan Bot Telegam yang berfungsi membuka kunci dan menutup kunci pada pintu perangkat yang terhubung dengan hardware OLTOKEY.\n\n";
          welcome += "✔ Segala perintah yang dijalankan pada OLTOKEY Bot akan disimpan pada dashboard OLTOKEY, jadi gunakan fitur yang tersedia dengan baik yang sesuai dengan SOP.\n\n";
          welcome += "❗️Pastikan untuk mengisi data akses pada /isijob \n\n";
          welcome += "OLTOKEY Make It Easy 😉\n\n";
          welcome += "/unlock : untuk membuka kunci OLT\n";
          welcome += "/lock : untuk mengunci kunci OLT\n";
          welcome += "/status : untuk melihat status kunci OLT\n";
          welcome += "/isijob : untuk mengisi data akses\n";
          bot.sendMessage(chat_id, welcome, "Markdown");
        }
      }
    }
  }

  void setup()
  {
    Serial.begin(115200);
    Serial.println();
    pinMode(ledPin, OUTPUT); // initialize digital ledPin as an output.
    delay(10);
    digitalWrite(ledPin, LOW); // initialize pin as off (active LOW)
    // attempt to connect to Wifi network:
    Serial.print("Connecting to Wifi SSID ");
    Serial.print(WIFI_SSID);
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT); // Add root certificate for api.telegram.org
    while (WiFi.status() != WL_CONNECTED)
    {
    Serial.print(".");
    delay(500);
    }
    Serial.print("\nWiFi connected. IP address: ");
    Serial.println(WiFi.localIP());

  //Motor Servo
    servoMotor.attach(SERVO_PIN);
    servoMotor.write(25); // Set posisi awal motor servo ke 0 derajat

  //LED
    pinMode(ledPin, OUTPUT); // initialize digital ledPin as an output.
    delay(10);
    digitalWrite(ledPin, HIGH);

  //buzzer
    pinMode(buzzer, OUTPUT);
  
  //webhook
  // String url = "https://api.telegram.org/bot" + String(BOT_TOKEN) + "/setWebhook?url=https://script.google.com/macros/s/AKfycbzfaxOci_dtJkHZSE1BZzah-MRsq4Cvg97wv0HpT9bZJ-MoslD7iElsCURTfLM0CJUhNw/exec";
  }
  
  
  void loop()
  {
    if (millis() - bot_lasttime > BOT_MTBS)
    {
      int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
      while (numNewMessages)
      {
        Serial.println("got response");
        handleNewMessages(numNewMessages);
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
      }
      bot_lasttime = millis();
    }
  //Magnetic Sensor ketika pintu dipaksa terbuka saat terkunci
    if (digitalRead(DOOR_SWITCH_PIN) == HIGH && doorLocked) {
      Serial.println("Ada gerakan tidak wajar pada OLT!");
      bot.sendMessage(CHAT_ID, "Ada gerakan tidak wajar pada OLT!!");
    }
    else {
      digitalWrite (buzzer, LOW); 
    }
    delay(500);
}
